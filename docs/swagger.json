{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "simple openstreetmap routing engine in go. Using Contraction Hierarchies for preprocessing and Bidirectioanl Dijkstra for shortest path query",
        "title": "navigatorx lintangbs API",
        "contact": {
            "name": "lintang birda saputra"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:5000",
    "basePath": "/api",
    "paths": {
        "/navigations/many-to-many": {
            "post": {
                "description": "many to many query shortest path . punya banyak source dan banyak destination buat querynya",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "navigations"
                ],
                "summary": "many to many query shortest path . punya banyak source dan banyak destination buat querynya. Mencari shortesth path ke setiap destination untuk setiap source",
                "parameters": [
                    {
                        "description": "request body query shortest path many to many",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.ManyToManyQueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.ManyToManyQueryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    }
                }
            }
        },
        "/navigations/map-matching": {
            "post": {
                "description": "map matching pakai hidden markov model. Snapping noisy GPS coordinates ke road network lokasi asal gps seharusnya",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "navigations"
                ],
                "summary": "map matching pakai hidden markov model. Snapping noisy GPS coordinates ke road network lokasi asal gps seharusnya",
                "parameters": [
                    {
                        "description": "request body hidden markov model map matching",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.MapMatchingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.MapMatchingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    }
                }
            }
        },
        "/navigations/shortest-path": {
            "post": {
                "description": "shortest path query antara 2 tempat di openstreetmap. Hanya 1 source dan 1 destination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "navigations"
                ],
                "summary": "shortest path query antara 2 tempat di openstreetmap.",
                "parameters": [
                    {
                        "description": "request body query shortest path antara 2 tempat",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.SortestPathRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.ShortestPathResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    }
                }
            }
        },
        "/navigations/shortest-path-alternative-street": {
            "post": {
                "description": "shortest path query antara 2 tempat di openstreetmap dengan menentukan alternative street untuk rutenya.. Hanya 1 source dan 1 destination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "navigations"
                ],
                "summary": "shortest path query antara 2 tempat di openstreetmap dengan menentukan alternative street untuk rutenya.",
                "parameters": [
                    {
                        "description": "request body query shortest path antara 2 tempat",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.SortestPathAlternativeStreetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.ShortestPathResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    }
                }
            }
        },
        "/navigations/shortest-path-ch": {
            "post": {
                "description": "shortest path query antara 2 tempat di openstreetmap  pake bidirectional dijkstra only, sebenarnya di endpoint shortest-path juga pake bidirectional dijkstra. jika preprocessing contraction hierarchiesnya selesai. Hanya 1 source dan 1 destination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "navigations"
                ],
                "summary": "shortest path query antara 2 tempat di openstreetmap  pake bidirectional dijkstra only, sebenarnya di endpoint shortest-path juga pake bidirectional dijkstra. jika preprocessing contraction hierarchiesnya selesai",
                "parameters": [
                    {
                        "description": "request body query shortest path antara 2 tempat",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.SortestPathRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.ShortestPathResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    }
                }
            }
        },
        "/navigations/tsp": {
            "post": {
                "description": "query traveling salesman problem pakai simulated annealing. Shortest path untuk rute mengunjungi beberapa tempat tepat sekali dan kembali ke tempat asal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "navigations"
                ],
                "summary": "query traveling salesman problem pakai simulated annealing. Shortest path untuk rute mengunjungi beberapa tempat tepat sekali dan kembali ke tempat asal",
                "parameters": [
                    {
                        "description": "request body query tsp",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.TravelingSalesmanProblemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.TravelingSalesmanProblemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/router.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "alg.Coordinate": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                }
            }
        },
        "alg.Navigation": {
            "type": "object",
            "properties": {
                "distance_before_turn": {
                    "type": "number"
                },
                "instruction": {
                    "type": "string"
                },
                "street_name": {
                    "type": "string"
                },
                "turn": {
                    "$ref": "#/definitions/alg.TURN"
                },
                "turn_eta": {
                    "type": "number"
                }
            }
        },
        "alg.TURN": {
            "type": "string",
            "enum": [
                "KIRI",
                "KANAN",
                "LURUS"
            ],
            "x-enum-varnames": [
                "KIRI",
                "KANAN",
                "LURUS"
            ]
        },
        "router.Coord": {
            "description": "model untuk koordinat",
            "type": "object",
            "required": [
                "lat",
                "lon"
            ],
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                }
            }
        },
        "router.ErrResponse": {
            "description": "model untuk error response",
            "type": "object",
            "properties": {
                "code": {
                    "description": "application-specific error code",
                    "type": "integer"
                },
                "error": {
                    "description": "application-level error message, for debugging",
                    "type": "string"
                },
                "status": {
                    "description": "user-level status message",
                    "type": "string"
                },
                "validation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "router.ManyToManyQueryRequest": {
            "description": "response body untuk query shortest path many to many",
            "type": "object",
            "required": [
                "sources",
                "targets"
            ],
            "properties": {
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.Coord"
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.Coord"
                    }
                }
            }
        },
        "router.ManyToManyQueryResponse": {
            "description": "response body untuk query shortest path many to many",
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.SrcTargetPair"
                    }
                }
            }
        },
        "router.MapMatchingRequest": {
            "description": "request body untuk map matching pakai hidden markov model",
            "type": "object",
            "required": [
                "coordinates"
            ],
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.Coord"
                    }
                }
            }
        },
        "router.MapMatchingResponse": {
            "description": "response body untuk map matching pakai hidden markov model",
            "type": "object",
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.Coord"
                    }
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "router.NodeRes": {
            "description": "model untuk node coordinate",
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                }
            }
        },
        "router.ShortestPathResponse": {
            "description": "response body untuk shortest path query antara 2 tempat di openstreetmap",
            "type": "object",
            "properties": {
                "ETA": {
                    "type": "number"
                },
                "algorithm": {
                    "type": "string"
                },
                "distance": {
                    "type": "number"
                },
                "found": {
                    "type": "boolean"
                },
                "navigations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alg.Navigation"
                    }
                },
                "path": {
                    "type": "string"
                },
                "route": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alg.Coordinate"
                    }
                }
            }
        },
        "router.SortestPathAlternativeStreetRequest": {
            "description": "request body untuk shortest path query antara banyak source dan banyak destination di openstreetmap",
            "type": "object",
            "required": [
                "dst_lat",
                "dst_lon",
                "src_lat",
                "src_lon",
                "street_alternative_lat",
                "street_alternative_lon"
            ],
            "properties": {
                "dst_lat": {
                    "type": "number"
                },
                "dst_lon": {
                    "type": "number"
                },
                "src_lat": {
                    "type": "number"
                },
                "src_lon": {
                    "type": "number"
                },
                "street_alternative_lat": {
                    "type": "number"
                },
                "street_alternative_lon": {
                    "type": "number"
                }
            }
        },
        "router.SortestPathRequest": {
            "description": "request body untuk shortest path query antara 2 tempat di openstreetmap",
            "type": "object",
            "required": [
                "dst_lat",
                "dst_lon",
                "src_lat",
                "src_lon"
            ],
            "properties": {
                "dst_lat": {
                    "type": "number"
                },
                "dst_lon": {
                    "type": "number"
                },
                "src_lat": {
                    "type": "number"
                },
                "src_lon": {
                    "type": "number"
                }
            }
        },
        "router.SrcTargetPair": {
            "description": "model untuk mapping source dan target di query shortest path many to many",
            "type": "object",
            "properties": {
                "source": {
                    "$ref": "#/definitions/router.NodeRes"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.TargetRes"
                    }
                }
            }
        },
        "router.TargetRes": {
            "description": "model untuk destinations di query shortest path many to many",
            "type": "object",
            "properties": {
                "ETA": {
                    "type": "number"
                },
                "distance": {
                    "type": "number"
                },
                "path": {
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/router.NodeRes"
                }
            }
        },
        "router.TravelingSalesmanProblemRequest": {
            "description": "request body untuk traveling salesman problem query",
            "type": "object",
            "required": [
                "cities_coord"
            ],
            "properties": {
                "cities_coord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.Coord"
                    }
                }
            }
        },
        "router.TravelingSalesmanProblemResponse": {
            "description": "response body untuk traveling salesman problem query",
            "type": "object",
            "properties": {
                "ETA": {
                    "type": "number"
                },
                "cities_order": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alg.Coordinate"
                    }
                },
                "distance": {
                    "type": "number"
                },
                "path": {
                    "type": "string"
                }
            }
        }
    }
}